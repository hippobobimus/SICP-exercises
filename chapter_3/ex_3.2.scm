#lang racket

(define (make-monitored f)
  (let ((total-calls 0))
    (lambda (x)
      (cond ((eq? x 'how-many-calls?)
             total-calls)
            ((eq? x 'reset-count)
             (set! total-calls 0)
             'ok)
            (else
              (set! total-calls (+ total-calls 1))
              (f x))))))

;; TEST
(define s (make-monitored sqrt))
(display "(s 100): ")
(display (s 100))
(newline)
(display "(s 'how-many-calls?): ")
(display (s 'how-many-calls?))
(newline)
(display "(s 81): ")
(display (s 81))
(newline)
(display "(s 'how-many-calls?): ")
(display (s 'how-many-calls?))
(newline)
(display "Reset count: ")
(display (s 'reset-count))
(newline)
(display "(s 100): ")
(display (s 100))
(newline)
(display "(s 'how-many-calls?): ")
(display (s 'how-many-calls?))
(newline)

*** Exercise 3.1:

(define (make-accumulator n)
  (let ((init-val n))
    (lambda (x)
      (set! init-val (+ init-val x))
      init-val)))


*** Exercise 3.2:

(define (make-monitored f)
  (let ((total-calls 0))
    (lambda (x)
      (cond ((eq? x 'how-many-calls?)
             total-calls)
            ((eq? x 'reset-count)
             (set! total-calls 0)
             'ok)
            (else
              (set! total-calls (+ total-calls 1))
              (f x))))))


*** Exercise 3.3:

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (valid-password? p)
    (eq? password p))
  (define (dispatch p m)
    (cond ((not (valid-password? p))
           (lambda _ "Incorrect password"))
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  dispatch)


*** Exercise 3.4:

(define (make-account balance password)
  (define attempts 0)
  (define (reset-attempts)
    (set! attempts 0))
  (define (inc-attempts)
    (set! attempts (+ attempts 1)))

  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (call-the-cops)
    (lambda _ "More than 7 failed password attempts. Calling the cops!"))

  (define (authenticate p m)
    (if (valid-password? p)
        (begin (reset-attempts)
               (dispatch m))
        (begin (inc-attempts)
               (invalid-password))))
  (define (valid-password? p)
    (eq? password p))
  (define (invalid-password)
    (if (> attempts 7)
        (call-the-cops)
        (lambda _ "Incorrect password")))

  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  authenticate)

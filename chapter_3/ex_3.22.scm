#lang sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" (print-queue))
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               (print-queue))
              (else 
                (set-cdr! rear-ptr new-pair)
                (set-rear-ptr! new-pair)
                (print-queue)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue" (print-queue)))
            (else
              (set-front-ptr! (cdr front-ptr))
              (print-queue))))
    (define (print-queue)
      (display front-ptr))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'print-queue) print-queue)
            (else
              (error "Undefined operation -- MAKE-QUEUE" m))))
    dispatch))

(define (empty-queue? queue) ((queue 'empty-queue?)))
(define (front-queue queue) ((queue 'front-queue)))
(define (insert-queue! queue item) ((queue 'insert-queue!) item))
(define (delete-queue! queue) ((queue 'delete-queue!)))
(define (print-queue queue) ((queue 'print-queue)))

;; Test
(define q1 (make-queue))

(display "Queue: ")
(print-queue q1)
(newline)
(newline)

(display "(insert-queue! q1 'a): ")
(insert-queue! q1 'a)
(newline)

(display "(insert-queue! q1 'b): ")
(insert-queue! q1 'b)
(newline)

(display "(delete-queue! q1): ")
(delete-queue! q1)
(newline)

(display "(delete-queue! q1): ")
(delete-queue! q1)
(newline)

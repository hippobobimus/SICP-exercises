#lang sicp
(#%require racket/trace)

(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)

(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

(define (count-pairs-old x)
  (if (not (pair? x))
      0
      (+ (count-pairs-old (car x))
         (count-pairs-old (cdr x))
         1)))

(define (count-pairs x)
  (let ((history '()))
    (define (count-pairs-1 x)
      (if (or (not (pair? x))
              (memq x history))
          0
          (begin (set! history (cons x history))
                 (+ (count-pairs-1 (car x))
                    (count-pairs-1 (cdr x))
                    1))))
  (count-pairs-1 x)))

;; Test
(define l1 (list 'a 'b 'c))
(define x (list 'a))
(define l2 (list x x))
(define y (cons x x))
(define l3 (cons y y))
(define l4 (list 'a 'temp 'b))
(set-car! (cdr l4) l4)

(newline)
(display "l1: ")
(display l1)
(newline)
(display "Count-pairs old version: ")
(display (count-pairs-old l1))
(newline)
(display "Count-pairs new version: ")
(display (count-pairs l1))
(newline)

(newline)
(display "l2: ")
(display l2)
(newline)
(display "Count-pairs old version: ")
(display (count-pairs-old l2))
(newline)
(display "Count-pairs new version: ")
(display (count-pairs l2))
(newline)

(newline)
(display "l3: ")
(display l3)
(newline)
(display "Count-pairs old version: ")
(display (count-pairs-old l3))
(newline)
(display "Count-pairs new version: ")
(display (count-pairs l3))
(newline)

(newline)
(display "l4: ")
(display l4)
(newline)
(display "Count-pairs old version: ")
(display "Infinite recursion")
(newline)
(display "Count-pairs new version: ")
(display (count-pairs l4))
(newline)
(newline)

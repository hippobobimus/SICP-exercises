#lang racket

(define (make-account balance password)
  (define attempts 0)
  (define (reset-attempts)
    (set! attempts 0))
  (define (inc-attempts)
    (set! attempts (+ attempts 1)))

  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (call-the-cops)
    (lambda _ "More than 7 failed password attempts. Calling the cops!"))

  (define (authenticate p m)
    (if (valid-password? p)
        (begin (reset-attempts)
               (dispatch m))
        (begin (inc-attempts)
               (invalid-password))))
  (define (valid-password? p)
    (eq? password p))
  (define (invalid-password)
    (if (> attempts 7)
        (call-the-cops)
        (lambda _ "Incorrect password")))

  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  authenticate)

;; TEST
(define acc (make-account 100 'secret-password))

(display "Withdraw 40: ")
(display ((acc 'secret-password 'withdraw) 40))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)
(display "Deposit 50: ")
(display ((acc 'some-other-password 'deposit) 50))
(newline)

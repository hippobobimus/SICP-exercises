*** Exercise 3.33:

(define (averager a b average)
  (let ((x (make-connector))
        (y (make-connector)))
    (adder a b y)
    (multiplier average x y)
    (constant 2 x)
    'ok))


*** Exercise 3.34:

If the values of a and b are unset and you set a then the value of b is calculated as expected.

However, if instead you begin by setting the value of b then a will not be calculated since the internal multiplier
procedure requires two of its three connectors to have a value.  Since a represents two of the multiplier's connectors,
if a is unset then there is no way to calculate it.


*** Exercise 3.35:

(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error "square less than 0 -- SQUARER" (get-value b))
            (set-value! a
                        (sqrt (get-value b))
                        me))
        (if (has-value? a)
            (set-value! b
                        (* (get-value b) (get-value b))
                        me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
            (error "Unknown request -- SQUARER" request))))
  (connect a me)
  (connect b me)
  me)


*** Exercise 3.36:

        -----------------------------------------------------------------------------------------------------------
GLOBAL->| make-connector----------------------------    a: --                                                     |
        | set-value!---------------                |        |      b:-----------------------------------------    |
        | has-value?--            |                |        |                                                |    |
        -------------|------------|----------------|--------|------------------------------------------------|-----
              ^      |    ^       |    ^           |    ^   |       ^                                        |
              |      |    |       V    |           V    |   |       |                                        |
              |      V    |     (.)(.)--         (.)(.)--   |       |                                        |
              |    (.)(.)--      |                |         |       |                                        |
              |     |            V                V         |       |                                        |
              |     V            p: connector     p: -      |       |                                        |
              |    p: connector     new-value     b: ...    |       |                                        |
              |    b: ...           informant               |       |                                        |
              |                  b: ...                     |       |                                        |
              |                                        ------       |                                        |
             ---------------------------               |           ---------------------------               |
        E1-->| value: #f -> 10         |               |      E2-->| value: #f               |               |
             | informant: #f -> 'user  |<-------       |           | informant: #f           |<-------       |
             | constraints: '()        |       |(x3)   |           | constraints: '()        |       |(x3)   |
             | set-my-value------------+-->(.)(.)      |           | set-my-value------------+-->(.)(.)      |
             | forget-my-value---------+-->(.)(.)      |           | forget-my-value---------+-->(.)(.)      |
             | connect-----------------+-->(.)(.)      |           | connect-----------------+-->(.)(.)      |
             | me-----------------     |               |           | me-----------------     |               |
             --------------------|------               |           --------------------|------               |
              (make-connector)   |   ^                 |            (make-connector)   |   ^                 |
                                 V   |                 |                               V   |                 |
                               (.)(.)-  <---------------                             (.)(.)-  <---------------
                                |                                                     |
                                V                                                     V
                                p: request                                            p: request
                                b: ...                                                b: ...

             --------------------
        E3-->| connector: a     |
             | new-value: 10    |--->GLOBAL
             | informant: 'user |
             --------------------
             (set-value! a 10 'user)

             ------------------------
        E4-->| request: 'set-value! |
             |                      |--->E1
             ------------------------
             (me 'set-value!)

             -----------------
        E5-->| new-value: 10 |--->E1
             | setter: 'user |
             -----------------
             (set-my-value 10 'user)

             -----------------
        E6-->| connector: a  |
             |               |--->GLOBAL
             -----------------
             (has-value? a)

             ------------------------
        E7-->| request: 'has-value? |
             |                      |--->E1
             ------------------------
             (me 'has-value?)

             ---------------------------------
        E8-->| exception: 'user              |
             | procedure: inform-about-value |--->GLOBAL
             | list: '()                     |
             | loop                          |
             ---------------------------------
             (for-each-except 'user inform-about-value '())


*** Exercise 3.37:

(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))

(define (c- x y)
  (let ((z (make-connector)))
    (adder z y x)
    z))

(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))

(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier z y x)
    z))

(define (cv x)
  (let ((z (make-connector)))
    (constant x z)
    z))

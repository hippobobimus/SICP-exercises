*** Exercise 3.5:

(define (square x) (* x x))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
            (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (* (random) range))))

(define (estimate-integral P x1 x2 y1 y2 trials)
  (define (experiment)
    (P (random-in-range x1 x2)
       (random-in-range y1 y2)))
  (let ((area-rect (* (- x2 x1)
                      (- y2 y1))))
    (* area-rect
       (monte-carlo trials experiment))))

(define (P x y)
  (<= (+ (square (- x 5))
         (square (- y 7)))
      (square 3)))

(define (estimate-pi)
  (/ (estimate-integral P 2.0 8.0 4.0 10.0 1000000)
     (square 3.0)))


*** Exercise 3.6:

(define rand
  (let ((x random-init))
    (define (dispatch msg)
      (cond ((eq? msg 'generate)
             (set! x (rand-update x))
             x)
            ((eq? msg 'reset)
             (lambda (new-init)
               (set! x new-init)
               'ok))))
    dispatch))

*** Exercise 3.28:

(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)


*** Exercise 3.29:

(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((x (make-wire))
          (y (make-wire))
          (z (make-wire)))
      (inverter a1 x)
      (inverter a2 y)
      (and-gate x y z)
      (inverter z output)))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)

The total delay of the composite or-gate is at minimum:

1 * and-gate-delay + 1 * inverter-delay

And at maximum:

1 * and-gate-delay + 2 * inverter-delay

This is because when the or-gate is triggered by add-action, only one of a1 or a2 has changed value therefore only
one of the initial inverters acts.  The and-gate then always acts but may or may not produce a changed output
which determines whether the final inverter acts.

As you do not know whether the final inverter acts the delay must be taken as the maximum value.


*** Exercise 3.30:

(define (ripple-carry-adder a-list b-list s-list c)
  (let ((c-list (map (lambda (_) (make-wire))       ;; c-list is c1 to cn-1
                     a-list)))
    (let ((c-in-list (append c-list (make-wire)))
          (c-out-list (cons c c-list)))
      (map full-adder
           a-list
           b-list
           c-in-list
           s-list
           c-out-list)
      'ok)))

The last bit of the result to be calculated will be s1 due to the propogation of the carry bit along the chain.

Therefore the overall delay will be the delay of the last full adder receiving c1 plus the delay a single full
adder incurs in producing s.

First look at half-adders in general:

ha-t-s = t-and + max(t-or, (t-and + t-inv))

ha-t-c = t-and

Now for full-adders:

fa-t-s = 2.ha-t-s
       = 2.(t-and + max(t-or, (t-and + t-inv)))

fa-t-c = ha-t-s + ha-t-c + t-or
       = 2.t-and + t-or + max(t-or, (t-and + t-inv))

And naturally it follows that:

t-c1 = (n - 1).fa-t-c
     = (n - 1).(2.t-and + t-or + max(t-or, (t-and + t-inv)))

t-s1 = t-c1 + fa-t-s
     = (n - 1).(2.t-and + t-or + max(t-or, (t-and + t-inv)))
       + 2.(t-and + max(t-or, (t-and + t-inv)))
     = n.t-and + (n - 1).t-or + (n + 1).max(t-or, (t-and + t-inv))


*** Exercise 3.31:

When the-agenda is defined it is initially empty.  Items are only added to the agenda when the procedure after-delay is called,
and this is only called when the primitive digital logic functions are called (e.g. inverter, and-gate, or-gate).  If we do not
call the procedure within the body of accept-action-procedure! then upon initialising the half-adder, nothing is added to
the-agenda and therefore there are no items for propogate gate to call.


*** Exercise 3.32:

Behaviour of and-gate when inputs change from 0,1 to 1,0:

Assume that you have created three wires input1, input2 and out.  These are used to instantiate an and-gate;

(and-gate input1 input2 out)

The and-action-procedure inside the and-gate is called when either of the input wires changes value, and in doing so
the procedure (lambda () (set-signal! output (logical-and (get-signal input1) (get-signal input2)))) is added to the
agenda along with the appropriate time determined from the and-gate-delay.

Therefore, if we follow an example of what happens when the inputs change from 0,1 to 1,0 we see the following:

input1 = 0, input2 = 1
input1 = 0 -> 1, input2 = 1

(lambda () (set-signal! output 1) is added to the agenda)     --[ProcA]

input1 = 1, input2 = 1 -> 0

(lambda () (set-signal! output 0) is added to the agenda)     --[ProcB]

If the segment uses a queue then ProcA is added first then ProcB.  Then when propogate calls procedures from the queue
ProcA is called first followed by ProcB. So the output goes from 0 -> 1 -> 0 within the segment. At the end of the segment
the inputs are 1,0 and the output is 0 which is correct.

However if the segment uses a list to store procedures adding and removing only at the front then ProcB is called before ProcA.
Thus the output goes from 0 -> 0 -> 1 and we end up with the wrong result.

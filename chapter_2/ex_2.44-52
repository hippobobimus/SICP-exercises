*** Exercise 2.44:

(define (up-split painter n)
  (if (= n 0)
    painter
    (let ((smaller (up-split painter (- n 1))))
      (below painter (beside smaller smaller)))))


*** Exercise 2.45:

(define (split parent child)
  (lambda (painter n)
    (if (= n 0)
        painter
        (let ((smaller ((split parent child) painter (- n 1))))
          (parent painter (child smaller smaller))))))

(define right-split (split beside below))

(define up-split (split below beside))


*** Exercise 2.46:

;; Constructor and selectors
(define make-vect cons)

(define xcor-vect car)

(define ycor-vect cdr)

;; Procedures
(define (add-vect v w)
  (make-vect (+ (xcor-vect v)
                (xcor-vect w))
             (+ (ycor-vect v)
                (ycor-vect w))))

(define (sub-vect v w)
  (make-vect (- (xcor-vect v)
                (xcor-vect w))
             (- (ycor-vect v)
                (ycor-vect w))))

(define (scale-vect s v)
  (make-vect (* s (xcor-vect v))
             (* s (ycor-vect v))))


*** Exercise 2.47:

;; Version 1
(define (make-frame-1 origin edge1 edge2)
  (list origin edge1 edge2))

(define origin-frame-1 car)

(define edge1-frame-1 cadr)

(define edge2-frame-1 caddr)

;; Version 2
(define (make-frame-2 origin edge1 edge2)
  (cons origin (cons edge1 edge2)))

(define origin-frame-2 car)

(define edge1-frame-2 cadr)

(define edge2-frame-2 cddr)


*** Exercise 2.48:

;; Constructor
(define (make-segment x0 y0 x1 y1)
  (cons (make-vect x0 y0)
        (make-vect x1 y1)))

(define start-segment car)

(define end-segment cdr)


*** Exercise 2.49:

;; (a) Draws the outline of the frame
(define painter-a (segments->painter (list (make-segment 0 0 0 1)
                                           (make-segment 0 0 1 0)
                                           (make-segment 1 0 1 1)
                                           (make-segment 0 1 1 1))))

;; (b) Draws an X by connecting opposite corners
(define painter-b (segments->painter (list (make-segment 0 0 1 1)
                                           (make-segment 1 0 0 1))))

;; (c) Draws a diamond by connecting midpoints of frame sides
(define painter-c (segments->painter (list (make-segment 0.5 0 1 0.5)
                                           (make-segment 0.5 0 0 0.5)
                                           (make-segment 0 0.5 0.5 1)
                                           (make-segment 1 0.5 0.5 1))))


*** Exercise 2.50:

(define (flip-horiz painter)
  (transform-painter painter
                     (make-vect 1.0 0.0)
                     (make-vect 0.0 0.0)
                     (make-vect 1.0 1.0)))

(define (rotate90 painter)
  (transform-painter painter
                     (make-vect 1.0 0.0)
                     (make-vect 1.0 1.0)
                     (make-vect 0.0 0.0)))

(define (compose f g)
  (lambda (x)
    (f (g x))))

(define (repeat func n)
  (if (= n 1)
      func
      (compose func (repeat func (- n 1)))))

(define (rotate180 painter)
  ((repeat rotate90 2) painter))

(define (rotate270 painter)
  ((repeat rotate90 3) painter))


*** Exercise 2.51:

(define (below-1 painter1 painter2)
  (let ((split-point (make-vect 0.0 0.5)))
    (let ((paint-left
            (transform-painter painter1
                               (make-vect 0.0 0.0)
                               (make-vect 1.0 0.0)
                               split-point))
          (paint-right
            (transform-painter painter2
                               split-point
                               (make-vect 1.0 0.5)
                               (make-vect 0.0 1.0))))
      (lambda (frame)
        (paint-left frame)
        (paint-right frame)))))

(define (below-2 painter1 painter2)
  (rotate90 (beside (rotate270 painter1)
                    (rotate270 painter2))))


*** Exercise 2.52:

Requires wave painter...

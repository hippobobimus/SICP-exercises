(define (same-parity . l)
  (define (par-func parity? items)
    (cond ((null? items)
           '())
          ((parity? (car items))
           (cons (car items) (par-func parity? (cdr items))))
          (else
            (par-func parity? (cdr items)))))
  (cond ((null? l)
         l)
        ((even? (car l))
         (par-func even? l))
        (else
         (par-func odd? l))))

;; Test
(newline)
(display "(same-parity 1 2 3 4 5 6 7 8 9) => ")
(display (same-parity 1 2 3 4 5 6 7 8 9))
(newline)
(display "(same-parity 2 3 4 5 6 7 8 9) => ")
(display (same-parity 2 3 4 5 6 7 8 9))
(newline)
(display "(same-parity 0 1 2 3 4 5 6 7 8 9) => ")
(display (same-parity 0 1 2 3 4 5 6 7 8 9))
(newline)
(display "(same-parity -1 0 1 2 3 4 5 6 7 8 9) => ")
(display (same-parity -1 0 1 2 3 4 5 6 7 8 9))
(newline)
(display "(same-parity -2 -1 0 1 2 3 4 5 6 7 8 9) => ")
(display (same-parity -2 -1 0 1 2 3 4 5 6 7 8 9))

#lang racket

(define (equal? x y)
  (cond ((and (not (pair? x))
              (not (pair? y)))
         (eq? x y))
        ((and (pair? x)
              (pair? y))
         (and (equal? (car x)
                      (car y))
              (equal? (cdr x)
                      (cdr y))))
        (else #f)))

;; Test
(define l1 '(this is a list))
(define l2 '(this is a list))
(define l3 '(this (is a) list))

(display "List 1: ")
(display l1)
(newline)
(display "List 2: ")
(display l2)
(newline)
(display "List 3: ")
(display l3)
(newline)
(display "(equal? l1 l2): ")
(display (equal? l1 l2))
(newline)
(display "(equal? l1 l3): ")
(display (equal? l1 l3))
(newline)

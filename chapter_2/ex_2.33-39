*** Exercise 2.33:

;; Map
(define (map p sequence)
  (accumulate (lambda (x y)
                (cons (p x) y))
              '()
              sequence))

;; Append
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))
              
;; Length
(define (inc x) (+ x 1))

(define (length sequence)
  (accumulate (lambda (x y)
                (+ 1 y))
              0
              sequence))


*** Exercise 2.34:

(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ this-coeff
                   (* x higher-terms)))
              0
              coefficient-sequence))


*** Exercise 2.35:

(define (count-leaves t)
  (accumulate +
              0
              (map (lambda (x) 1) (enumerate-tree t))))


*** Exercise 2.36:

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))


*** Exercise 2.37:

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (m-row) (dot-product m-row v))
       m))

(define (transpose mat)
  (accumulate-n cons
                '()
                mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (m-row)
           (matrix-*-vector cols m-row))
         m)))


*** Exercise 2.38:

(fold-right / 1 (list 1 2 3))
(/ 1 (/ 2 (/ 3 1)))
= 3/2

(fold-left / 1 (list 1 2 3))
(/ (/ (/ 1 1) 2) 3)
= 1/6

(fold-right list nil (list 1 2 3))
(list 1 (list 2 (list 3 ())
(1 (2 (3 ())))

(fold-left list nil (list 1 2 3))
(list (list (list () 1) 2) 3)
(((() 1) 2) 3)

For fold-right and fold-left to produce the same values for any sequence, op should be commutative and associative.
For example:

(fold-right * 1 (1 2 3))
(* 1 (* 2 (* 3 1)))
(* 1 1 2 3)

(fold-left * 1 (1 2 3))
(* (* (* 1 1) 2) 3)
(* 1 1 2 3)

*** Exercise 2.39:

(define (reverse-fr sequence)
  (fold-right (lambda (x y) (append y (list x))) '() sequence))

(define (reverse-fl sequence)
  (fold-left (lambda (x y) (cons y x)) '() sequence))

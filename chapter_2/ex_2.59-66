*** Exercise 2.59:

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((element-of-set? (car set1) set2)
         (union-set (cdr set1) set2))
        (else
          (cons (car set1) (union-set (cdr set1) set2)))))


*** Exercise 2.60:

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cons x set))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else (cons (car set1) (union-set (cdr set1) set2)))))

(define (intersection-set-original set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set-original (cdr set1) set2)))
        (else (intersection-set-original (cdr set1) set2))))

(define (intersection-set set1 set2)
  (let ((union (union-set set1 set2))
        (checklist (intersection-set-original set1 set2)))
    (intersection-set-original union checklist)))

The procedure element-of-set? is unchanged, adjoin-set is now O(1) since it is a single call to cons.

union-set is now O(n) instead of O(n^2) because it no longer calls element-of-set? and is just a recursive call
to itself.

Intersection can be interpreted in two ways, either exactly as before the intersection of (1) and (1) becomes (1),
or instead (1 1).  Either way the time complexity remains O(n^2).

Therefore in applications with large sets and/or frequent calls to adjoin-set or union-set, this representation would
be significantly more performant.


*** Exercise 2.61:

(define (adjoin-set x set)
  (cond ((or (null? set) (< x (car set)))
         (cons x set))
        ((= x (car set))
         set)
        (else (cons (car set) (adjoin-set x (cdr set))))))


*** Exercise 2.62:

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else
          (let ((x1 (car set1))
                (x2 (car set2)))
            (cond ((< x1 x2)
                   (cons x1
                         (union-set (cdr set1) set2)))
                  ((= x1 x2)
                   (cons x1
                         (union-set (cdr set1) (cdr set2))))
                  (else (cons x2
                              (union-set set1 (cdr set2)))))))))


*** Exercise 2.63:

(a)

Both procedures produce the same result, namely (1 3 5 7 9) for the examples given since they traverse the tree
in ascending order.

(b)

Both procedures must visit every entry in the tree, which gives O(n).  However, there is also a call to append
at each call to tree->list-1.  As defined previously, append has an order of growth that is proportional to the length of
its left argument.  In this case that is the list of elements in the left branch.  Assuming a balanced tree, the number of
elements in the left branch will halve at each step.  Over n steps this gives O(nlogn).

tree->list1: O(nlogn)
tree->list2: O(n)


*** Exercise 2.64:



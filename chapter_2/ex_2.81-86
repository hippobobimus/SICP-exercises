*** Exercise 2.81:

(a)

After Louis' additions, if you call expo with two complex numbers apply-generic enters an infinite
recursion.

This is because there is no procedure in the table for expo and two complex numbers so
apply-generic trys coercion.  The coercion succeeds because complex->complex is available and there
is a recursive call to apply-generic with the same arguments as the first call.  This continues ad
infinitum.

(b)

apply-generic works correctly as-is, however it does make an unnecessary check for coercions between
arguments of the same type.

(c)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (if (equal? type1 type2)
                    (error "No method for these types -- APPLY-GENERIC"
                           (list op type-tags))
                    (let ((t1->t2 (get-coercion type1 type2))
                          (t2->t1 (get-coercion type2 type1)))
                      (cond (t1->t2
                             (apply-generic op (t1->t2 a1) a2))
                            (t2->t1
                             (apply-generic op a1 (t2->t1 a2)))
                            (else
                              (error "No method for these types -- APPLY-GENERIC"
                                     (list op type-tags)))))))
              (error "No method for these types -- APPLY-GENERIC"
                     (list op type-tags)))))))


*** Exercise 2.82:

(define (coerce type-tags args)
  (define (iter tags)
    (if (null? tags)
        #f
        (let ((target-type (car tags)))
          (let ((coercions (map (lambda (source-type)
                                  (if (eq? source-type target-type)
                                      (lambda (x) x)
                                      (get-coercion source-type target-type)))
                                type-tags)))
            (if (memq #f coercions)
                (iter (cdr tags))
                (map (lambda (coercion arg) (coercion arg))
                     coercions
                     args))))))
  (iter type-tags))

(define (elements-equal? l)
  (define (elements-equal-iter reference check-list)
  (cond ((null? check-list) #t)
        ((eq? (car check-list) reference)
         (elements-equal-iter reference (cdr check-list)))
        (else #f)))
  (if (null? l)
      #t
      (elements-equal-iter (car l) (cdr l))))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (cond (proc
             (apply proc (map contents args)))
            ((elements-equal? type-tags)
             (error "No method for these types -- APPLY-GENERIC"
                    (list op type-tags)))
            (else
              (let ((coerced-args (coerce type-tags args)))
                (if coerced-args
                    (apply apply-generic (cons op coerced-args))
                    (error "No method for these types -- APPLY-GENERIC"
                           (list op type-tags)))))))))


*** Exercise 2.83:

(define (raise x)
  (apply-generic 'raise x))

(define (install-integer-package)
  ;; internal procedures
  ...
  (define (int->rat x)
    (make-rational x 1))
  ;; interface to rest of the system
  ...
  (put 'raise '(integer) int->rat)
  'done)

(define (install-rational-package)
  ;; internal procedures
  ...
  (define (rat->real x)
    (/ (numer x) (denom x)))
  ;; interface to rest of the system
  ...
  (put 'raise '(rational) rat->real)
  'done)

;; Real arithmetic
(define (install-real-package)
  ;; internal procedures
  (define (real->cplx x)
    (make-complex-from-real-imag x 0))
  ;; interface to rest of the system
  ...
  (put 'raise '(real) real->cplx)
  'done)


*** Exercise 2.84:

(define (rank type)
  (apply-generic 'rank type))

(define (install-type-rank-package)
  (put 'rank '(integer) (lambda (x) 0))
  (put 'rank '(rational) (lambda (x) 1))
  (put 'rank '(real) (lambda (x) 2))
  (put 'rank '(complex) (lambda (x) 3))
  'done)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((a1 (car args))
                    (a2 (cadr args)))
                (let ((rank1 (rank a1))
                      (rank2 (rank a2)))
                  (cond ((eq? rank1 rank2)
                         (error
                           "No method for these types -- APPLY-GENERIC"
                           (list op type-tags)))
                        ((< rank1 rank2)
                         (apply-generic op (raise a1) a2))
                        (else
                          (apply-generic op a1 (raise a2))))))
              (error
                "No method for these types -- APPLY-GENERIC"
                (list op type-tags)))))))


*** Exercise 2.85:

(define (drop x)
  (cond ((zero? (rank x)) x)
        ((equ? x (raise (project x)))
         (drop (project x)))
        (else x)))

(define (project x)
  (apply-generic 'project x))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (if (or (eq? op 'raise)
                  (eq? op 'project)
                  (eq? op 'equ?)
                  (eq? op '=zero?)
                  (eq? op 'rank))
              (apply proc (map contents args))
              (drop (apply proc (map contents args))))
          (if (= (length args) 2)
              (let ((a1 (car args))
                    (a2 (cadr args)))
                (let ((rank1 (rank a1))
                      (rank2 (rank a2)))
                  (cond ((eq? rank1 rank2)
                         (error
                           "No method for these types -- APPLY-GENERIC"
                           (list op type-tags)))
                        ((< rank1 rank2)
                         (apply-generic op (raise a1) a2))
                        (else
                          (apply-generic op a1 (raise a2))))))
              (error
                "No method for these types -- APPLY-GENERIC"
                (list op type-tags)))))))

(define (install-rational-package)
  ;; internal procedures
  ..
  (define (project->int x)
    (make-integer (round (/ (numer x) (denom x)))))
  ;; interface to rest of the system
  ...
  (put 'project '(rational) project->int)
  'done)

(define (install-real-package)
  ;; internal procedures
  ...
  (define (project->int x)
    (make-integer (round x)))
  ;; interface to rest of the system
  ...
  (put 'project '(real) project->int)
  'done)

(define (install-complex-package)
  ...
  (define (project->real z)
    (real-part z))
  ;; interface to rest of the system
  ...
  (put 'project '(complex) project->real)
  'done)


*** Exercise 2.86:

(define (sine x) (apply-generic 'sine x))
(define (cosine x) (apply-generic 'cosine x))
(define (arctan x y) (apply-generic 'arctan x y))
(define (exp x y) (apply-generic 'exp x y))

(define (install-real-package)
  ...
  (put 'sine '(real) (lambda (x) (tag (sin x))))
  (put 'cosine '(real) (lambda (x) (tag (cos x))))
  (put 'arctan '(real real) (lambda (x y) (tag (atan x y))))
  (put 'exp '(real real) (lambda (x y) (tag (expt x y))))
  'done)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (cond (proc
             (if (or (eq? op 'raise)
                     (eq? op 'project)
                     (eq? op 'equ?)
                     (eq? op '=zero?)
                     (eq? op 'rank))
                 (apply proc (map contents args))
                 (drop (apply proc (map contents args)))))
            ((and (= (length args) 1)
                  (< (rank (car args)) 3))
             (apply-generic op (raise (car args))))
            ((= (length args) 2)
             (let ((a1 (car args))
                   (a2 (cadr args)))
               (let ((rank1 (rank a1))
                     (rank2 (rank a2)))
                 (cond ((eq? rank1 rank2)
                        (error
                          "No method for these types -- APPLY-GENERIC"
                          (list op type-tags)))
                       ((< rank1 rank2)
                        (apply-generic op (raise a1) a2))
                       (else
                         (apply-generic op a1 (raise a2)))))))
            (else
              (error
                "No method for these types -- APPLY-GENERIC"
                (list op type-tags)))))))

(define (square x) (mul x x))
(define (sqrt x) (exp x 0.5))

(define (install-rectangular-package)
  ...
  (define (magnitude z)
    (sqrt (add (square (real-part z))
               (square (imag-part z)))))
  (define (angle z)
    (arctan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (mul r (cosine a)) (mul r (sine a))))
  ...
  'done)

(define (install-polar-package)
  ...
  (define (real-part z)
    (mul (magnitude z) (cosine (angle z))))
  (define (imag-part z)
    (mul (magnitude z) (sine (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrt (add (square x) (square y)))
          (arctan y x)))
  ...
  'done)

;; Complex arithmetic
(define (install-complex-package)
  ...
  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (sub (angle z1) (angle z2))))
  ...
  'done)

*** Exercise 2.56:

;; New procedures
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))

(define (base e) (cadr e))

(define (exponent e) (caddr e))

(define (make-exponentiation b e)
  (cond ((=number? b 0) 0)
        ((=number? e 0) 1)
        ((and (number? b) (number? e)) (exp b e))
        (else (list '** b e))))

;; Symbolic differentiation algorithm
(define (deriv expr var)
  (cond ((number? expr) 0)
        ((variable? expr)
         (if (same-variable? expr var) 1 0))
        ((sum? expr)
         (make-sum (deriv (addend expr) var)
                   (deriv (augend expr) var)))
        ((product? expr)
         (make-sum
           (make-product (multiplier expr)
                         (deriv (multiplicand expr) var))
           (make-product (deriv (multiplier expr) var)
                         (multiplicand expr))))
        ((exponentiation? expr)
         (make-product (make-product (exponent expr)
                                     (make-exponentiation (base expr)
                                                          (make-sum (exponent expr)
                                                                    '-1)))
                       (deriv (base expr) var)))
        (else
          (error "unknown expression type -- DERIV" expr))))


*** Exercise 2.57:

(define (augend s)
  (if (null? (cdddr s))
      (caddr s)
      (cons '+ (cddr s))))

(define (multiplicand p)
  (if (null? (cdddr p))
      (caddr p)
      (cons '* (cddr p))))


*** Exercise 2.58:

(a)

;; Sum
(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))

(define (addend s) (car s))

(define (augend s) (caddr s))

;; Product
(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

(define (multiplier p) (car p))

(define (multiplicand p) (caddr p))

;; Exponentiation
(define (exponentiation? x)
  (and (pair? x) (eq? (cadr x) '**)))

(define (make-exponentiation b e)
  (cond ((=number? b 0) 0)
        ((=number? e 0) 1)
        ((and (number? b) (number? e)) (exp b e))
        (else (list b '** e))))

(define (base e) (car e))

(define (exponent e) (caddr e))

(b)

;; Find the lowest precedence operator
(define (operator expr)
  (if (memq '+ expr)
      '+
      '*))

;; Sum
(define (sum? x)
  (and (pair? x) (eq? (operator x) '+)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))

(define (addend s)
  (define (iter result expr)
    (if (eq? (car expr) '+)
        (if (null? (cdr result))
            (car result)
            result)
        (iter (append result (list (car expr))) (cdr expr))))
  (iter '() s))

(define (augend s)
  (let ((result (cdr (memq '+ s))))
    (if (null? (cdr result))
        (car result)
        result)))

;; Product
(define (product? x)
  (and (pair? x) (eq? (operator x) '*)))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

(define (multiplier p)
  (define (iter result expr)
    (if (eq? (car expr) '*)
        (if (null? (cdr result))
            (car result)
            result)
        (iter (append result (list (car expr))) (cdr expr))))
  (iter '() p))

(define (multiplicand p)
  (let ((result (cdr (memq '* p))))
    (if (null? (cdr result))
        (car result)
        result)))

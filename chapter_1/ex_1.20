*** Exercise 1.20:

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

Use normal-order evaluation to expand the below:

(gcd 206 40)

(gcd 40 (remainder 206 40))

(if (= (remainder 206 40) 0) ...
==> remainder evaluated 1 time.
(if (= 6 0)...

(gcd (remainder 206 40) (remainder 40 (remainder 206 40)))

(if (= (remainder 40 (remainder 206 40)) 0) ...
==> remainder evaluated 2 times.
(if (= 4 0) ...

(gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

(if (= (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) 0) ...
==> remainder evaluated 4 times.
(if (= 2 0) ...

(gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

(if (= (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) 0 ...
==> remainder evaluated 7 times.
(if (= 0 0) ...

(remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
==> remainder evaluated 4 times.
2

==> NORMAL-ORDER evaluation results in evaluating remainder 18 times.

Now look at applicative-order evaluation:

(gcd 206 40)

(gcd 40 (remainder 206 40))
==> remainder evaluated 1 time.
(gcd 40 6)

(gcd 6 (remainder 40 6))
==> remainder evaluated 1 time.
(gcd 6 4)

(gcd 4 (remainder 6 4))
==> remainder evaluated 1 time.
(gcd 4 2)

(gcd 2 (remainder 4 2))
==> remainder evaluated 1 time.
(gcd 2 0)

2

==> APPLICATIVE-ORDER evaluation results in evaluating remainder 4 times.

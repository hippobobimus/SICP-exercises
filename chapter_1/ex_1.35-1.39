*** Exercise 1.35:

phi^2 = phi + 1

Therefore dividing through by phi gives;

phi = 1 + 1/phi

==> phi is a fixed point of the mapping x --> 1 + 1/x


(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (compute-phi)
  (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0))

returns a value for phi of 1.6180...


*** Exercise 1.36:

Find a solution to x^x = 1000

x --> log(1000)/log(x)

Without average damping:

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (compute-x)
  (fixed-point (lambda (x) (/ (log 1000) (log x))) 4.0))

==> 29 steps to compute x to the given tolerance.


Now with average damping:

x --> log(1000)/log(x)

x --> (1/2).(x + log(1000)/log(x))

(define (compute-x-damped)
  (fixed-point (lambda (x) (* 0.5 (+ x (/ (log 1000) (log x))))) 4.0))

==> 7 steps to compute x.


*** Exercise 1.37:

Iterative version:

(define (cont-frac n d k)
  (define (cont-frac-iter x result)
    (if (= x 0)
        result
        (cont-frac-iter (- x 1) (/ (n x) (+ (d x) result)))))
  (cont-frac-iter k 0))

(define (inverse-phi k)
  (cont-frac (lambda (i) 1.0)
             (lambda (i) 1.0)
             k))

k ~ 10 gives 1/phi to 4 d.p.

Recursive version:

(define (cont-frac-rec n d k) ; recursive
  (define (rec x)
    (if (> x k)
        0
        (/ (n k) (+ (d k) (rec (+ x 1))))))
  (rec 1.0))


*** Exercise 1.38:

Continued fraction with:

Ni = 1

Di; 1,2,1,1,4,1,1,6,1,1,8,...

==> when (i+1)/3 produces an integer result D is 1.
==> otherwise;
      (n+1)/3 - 1
      ==> (2/3).(n+1)


(define (cont-frac n d k) ; iterative
  (define (cont-frac-iter x result)
    (if (= x 0)
        result
        (cont-frac-iter (- x 1) (/ (n x) (+ (d x) result)))))
  (cont-frac-iter k 0))


(define (euler-cf k)
  (cont-frac (lambda (i) 1.0)
             (lambda (i) 
               (if (= (remainder (+ i 1) 3) 0)
                   (* (/ 2 3) (+ i 1))
                   1))
             k))

(define (compute-e k)
  (+ (euler-cf k) 2))


*** Exercise 1.39:

Ni = x if i=1, else -(x^2)
Di = 2i - 1

(define (cont-frac n d k) ; iterative
  (define (cont-frac-iter x result)
    (if (= x 0)
        result
        (cont-frac-iter (- x 1) (/ (n x) (+ (d x) result)))))
  (cont-frac-iter k 0))

(define (tan-cf x k)
  (let ((y (-(square x))))
    (cont-frac (lambda (i) (if (= i 1) x y))
               (lambda (i) (- (* 2 i) 1))
               k)))
